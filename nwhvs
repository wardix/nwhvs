#!/usr/bin/env python3

import argparse
import yaml
import uuid
import datetime
import requests
import os
import shutil
from requests.auth import HTTPDigestAuth


def parse_config(config_file):
    with open(config_file, "r") as f:
        config = yaml.safe_load(f)
    return config


def build_request_event_post_data(
    search_id, per_page, search_position, start_time, end_time
):
    return {
        "AcsEventCond": {
            "searchId": f"{search_id}",
            "maxResults": per_page,
            "searchResultPosition": search_position,
            "major": 0,
            "minor": 0,
            "startTime": start_time,
            "endTime": end_time,
        }
    }


def generate_picture_directory(base_directory, clock):
    return os.path.join(base_directory, clock.strftime("%Y%m%d"))


def generate_picture_filename(clock, employee_id, device_name):
    return clock.strftime("%H%M%S") + "-" + employee_id + "-" + device_name + ".jpg"


def request_event_data(session, url, post_data):
    try:
        response = session.post(url, json=post_data)
        response.raise_for_status()
    except requests.exceptions.RequestException as e:
        print(f"An error occured during request ({url}): {e}")
        return None

    return response


def request_picture_data(session, url):
    try:
        response = session.get(url)
        response.raise_for_status()
    except requests.exceptions.RequestException as e:
        print(f"An error occurred during request ({url}): {e}")
        return None

    return response


def save_picture(directory, file, content):
    if not os.path.isdir(directory):
        os.makedirs(directory)
    file_path = os.path.join(directory, file)

    try:
        with open(file_path, "wb") as f:
            f.write(content)
    except IOError as e:
        print(f"An error occurred while writing to file ({file_path}): {e}")


def scrape_device(device, start_time, end_time, store_directory, finger_print_image):
    path = "/ISAPI/AccessControl/AcsEvent?format=json"
    url = (
        device["url"][:-1] + path
        if device["url"].endswith("/")
        else device["url"] + path
    )
    search_id = uuid.uuid4()

    session = requests.Session()
    session.auth = HTTPDigestAuth(device["username"], device["password"])

    per_page = 20
    search_position = 0
    while True:
        post_data = build_request_event_post_data(
            search_id, per_page, search_position, start_time, end_time
        )
        event_response = request_event_data(session, url, post_data)
        if event_response is None or not event_response.ok:
            break

        event_data = event_response.json()

        total_event = event_data["AcsEvent"]["totalMatches"]
        if total_event < 1:
            break

        num_match = event_data["AcsEvent"]["numOfMatches"]

        for event in event_data["AcsEvent"]["InfoList"]:
            if event["currentVerifyMode"] == "invalid":
                continue
            clock = datetime.datetime.strptime(event["time"], "%Y-%m-%dT%H:%M:%S%z")
            # authentication failed
            if "name" not in event:
                continue
            employee_id = event["employeeNoString"]

            picture_directory = generate_picture_directory(store_directory, clock)
            picture_filename = generate_picture_filename(
                clock, employee_id, device["name"]
            )

            if os.path.exists(os.path.join(picture_directory, picture_filename)):
                continue

            # not face authentication
            if not ("pictureURL" in event):
                shutil.copy(finger_print_image, os.path.join(picture_directory, picture_filename))
                continue

            picture_response = request_picture_data(session, event["pictureURL"])
            if picture_response is None or not picture_response.ok:
                continue
            save_picture(picture_directory, picture_filename, picture_response.content)

        if total_event <= (search_position + num_match):
            break
        search_position += per_page
        # renew session every 100 item fetched
        if (search_position % 100) == 0:
            session = requests.Session()
            session.auth = HTTPDigestAuth(device["username"], device["password"])


def main():
    parser = argparse.ArgumentParser(description="Nusawork Hikvision presence scraper")
    parser.add_argument("--config", required=True, help="Config file")
    parser.add_argument(
        "--start", metavar="<datetime>", help="start time that will be scraped"
    )
    parser.add_argument(
        "--period",
        metavar="<period seconds>",
        help="data period that will be scraped",
    )

    args = parser.parse_args()
    config_file = args.config
    config = parse_config(config_file)

    period = int(args.period if args.period else config["period"])
    if args.start:
        start = datetime.datetime.strptime(args.start, "%Y-%m-%d %H:%M:%S")
        start_time = start.strftime("%Y-%m-%dT%H:%M:%S") + config["timezone_offset"]
        end = start + datetime.timedelta(seconds=period)
        end_time = end.strftime("%Y-%m-%dT%H:%M:%S") + config["timezone_offset"]
    else:
        now = datetime.datetime.now()
        end_time = now.strftime("%Y-%m-%dT%H:%M:%S") + config["timezone_offset"]
        start = now - datetime.timedelta(seconds=period)
        start_time = start.strftime("%Y-%m-%dT%H:%M:%S") + config["timezone_offset"]

    for device in config["device"]:
        scrape_device(device, start_time, end_time, config["store_directory"], config["finger_print_image"])


if __name__ == "__main__":
    main()
